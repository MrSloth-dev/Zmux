#!/usr/bin/env bash
# A script to manage and create Tmux Sessions.

set -euo pipefail
VERSION="v0.3.2"
export CONFIG_DIR="${HOME}/.config/zmux"
export CONFIG_FILE="${HOME}/.config/zmux/config.yaml"

#Requirements
command -v tmux >/dev/null 2>&1 || { echo "zmux: Error: tmux is required but not installed." >&2; exit 1; }
command -v fzf >/dev/null 2>&1 || { echo "zmux: Error: fzf is required but not installed." >&2; exit 1; }

command -v yq >/dev/null 2>&1 || { echo "zmux: Error: yq is required but not installed." >&2; exit 1; }
yq_version=$(yq --version | awk '{print $4}')
if [ "$yq_version" \< "v4.44.6" ]; then
    echo "zmux: Error: yq version must be greater of equal than v4.44.6" >&2
    echo "zmux: Error: Current version is ${yq_version}" >&2
    exit 1;
fi;

# UTILS

tmux_running() {
    tmux ls > /dev/null 2>&1
}

is_tmux_open() {
    [[ -z "${TMUX:-}" ]]
}

session_exists() {
    tmux has-session -t "$1" 2>/dev/null
}

check_config() {
    if [[ ! -d "${CONFIG_DIR}" ]]; then
        echo "zmux: Error: Config directory not found at '${CONFIG_FILE}'" >&2
        read -p "Want to create Config Directory?[Y/n] " yn
        case $yn in
            [Yy]* )
                mkdir -p "${CONFIG_DIR}" && echo "Config directory created at '${CONFIG_DIR}'";
                touch "${CONFIG_FILE}" && echo "Default config file created at '${CONFIG_FILE}'";
                exit 0;;
            [Nn]* )
                echo "zmux: Error: Need to have Config directory";
                exit 1;;
            *) echo "zmux: Error: answer not valid. Exiting.." && exit;;
        esac;
        exit 2;
    fi
    yaml_files=("${CONFIG_DIR}"/*.yaml)
    if [[ ! -e "${yaml_files[0]}" ]]; then
        echo "zmux: Error: No yaml configuration found in '${CONFIG_DIR}'";
        exit 1;
    fi

    configured=()
    duplicate_sessions=()

    for config_file in "${CONFIG_DIR}"/*.yaml; do
        if [[ -f "${config_file}" ]]; then
                session_names=$(yq '.sessions | keys | .[]' "${config_file}")
                while IFS= read -r session; do
                    if [[ "${configured[*]}" =~ (^| )${session}($| ) ]]; then
                        echo "${session}"
                        duplicate_sessions+=("${session}")
                    fi
                configured+="${session}"$'\n'
                done <<< "${session_names}"
        fi
    done
    if [[ ${#duplicate_sessions[@]} -gt 0 ]]; then
        dup=$(printf '%s ' "${duplicate_sessions[@]}")
        echo -e "zmux: error: duplicate session(s) found '${dup}', exiting.." >&2;
        exit 2
    fi
}

preview() {
    session_name=$1
    [[ -z $1 ]] && return
    echo "Session : ${session_name}"
    echo "-------------------------------------------------"
    if session_exists "${session_name}"; then
        echo "Status: Active"
    else
        echo "Status: Inactive"
    fi
    local found=false
    for yaml_file in "${CONFIG_DIR}"/*.yaml; do
        if (yq ".sessions.${session_name}" "${yaml_file}" | grep -v null &>/dev/null); then
            echo -e "Configuration file: $(basename ${yaml_file})"
            found=true
            break
        fi
    done
    if ! ${found}; then
        echo -e "Configuration file: Not found"
    fi
    if session_exists "${session_name}"; then
        echo -e "\nConfigured Windows:"
        echo "$(tmux list-windows -t ${session_name} -F '- #{window_name}')"
    fi
    for yaml_file in "${CONFIG_DIR}"/*.yaml; do
        if (yq ".sessions.${session_name}" "${yaml_file}" | grep -v null &>/dev/null); then
            if ! session_exists "${session_name}"; then
                echo -e "\nConfigured Windows:"
                yq ".sessions.${session_name}.windows[].name" "${yaml_file}" | sed 's/^/- /'
            fi
        fi
    done
}

export -f preview
export -f session_exists

# List when no args
list_sessions() {
    check_config
    if [[ $(echo "${configured}" | uniq -d) ]]; then
        dup=$(echo "${configured}" | uniq -d | tr '\n' ' ')
        echo -e "zmux: error: duplicate session(s) found '${dup}', exiting.." >&2;
        exit 2
    fi
    active=$(tmux ls -F "#S" 2>/dev/null || echo "")
    combined=$(printf "%s\n%s" "$configured" "$active" | sort -u | grep -ve "^$")
    local session=$(echo "$combined" | fzf --tmux 70% --border-label='Available Sessions' --header-first --bind='ctrl-t:toggle-preview' --preview="bash -c 'preview {}'" --header='Please select a session')
    if [[ -n "$session" ]]; then
        if ! session_exists "$session"; then
            create_session "$session"
        fi
        if is_tmux_open; then
            tmux attach-session -t "$session":1
        else
            tmux switch-client -t "$session":1
        fi
    fi
}

create_session() {
    local session_name="$1"
    local config_file=""

    for yaml_file in "${CONFIG_DIR}"/*.yaml; do
        if yq ".sessions.${session_name}" "${yaml_file}" | grep -v null &>/dev/null ; then
            config_file="${yaml_file}"
            break
        fi
    done

    if [[ -z $config_file ]]; then
        echo "zmux: Error: Session '${session_name}' not found in any config file."
        exit 2;
    fi

    local root_dir=$(eval echo $(yq ".sessions.${session_name}.root" "$config_file"))
    local start_index=$(yq ".sessions.${session_name}.start_index // 1" "$config_file")

    tmux new-session -d -s "${session_name}" -c "${root_dir}"

    local window_count=$(yq ".sessions.${session_name}.windows | length" "$config_file")
    for ((i = 0; i < window_count; i++)); do
        local window_name=$(yq ".sessions.${session_name}.windows[${i}].name" "$config_file")
        local window_layout=$(yq ".sessions.${session_name}.windows[${i}].layout // \"tiled\"" "$config_file")
        local window_command=$(yq ".sessions.${session_name}.windows[${i}].command" "$config_file")
        if ((i == 0)); then
            tmux rename-window -t ${session_name}:${start_index} "${window_name}"
        else
            tmux new-window -t ${session_name} -n "${window_name}" -c "${root_dir}"
        fi
        local pane_count=$(yq ".sessions.${session_name}.windows[${i}].panes | length // 0" "$config_file")
        if [[ "${pane_count}" -gt 0 ]]; then
            for ((j = 1; j < pane_count; j++)); do
                tmux split-window -t "${session_name}:${window_name}"
            done
            tmux select-layout -t "${session_name}:${window_name}" "${window_layout}"
            for ((j = 0; j < pane_count; j++)); do
                local pane_command=$(yq ".sessions.${session_name}.windows[${i}].panes[${j}].command" "$config_file")
                if [[ -n "${pane_command}" ]]; then
                    tmux send-keys -t "${session_name}:${window_name}.$((j + 1))" "$pane_command" C-m
                fi
            done
        fi
    done
}

# When using -e flag
export_config() {
    local session_name=$(tmux display-message -p "#S")
    check_config
    if [[ $(echo "${configured}" | grep "${session_name}") ]]; then
        echo -e "zmux: Error: Session name already exists, Exiting.." >&2;
        exit
    fi
    echo "Avaiable config files:"
    find "${CONFIG_DIR}" \( -type f -o -type l \) -name "*.yaml" -exec basename '{}' .yaml \;
    read -p "Enter file (without path or extension) to export to: " config_name
    if [[ -z "${config_name}" ]]; then
        config_name="${session_name}.yaml"
    fi
    if [[ ! "$config_name" =~ \.yaml$ ]]; then
        config_name="${config_name}.yaml"
    fi
    local export_file="${CONFIG_DIR}/${config_name}"
    local root_dir=$(tmux display-message -p -t $session_name:1 '#{pane_current_path}')
    if [[ -z "${root_dir}" ]]; then
        read -p "zmux: Error: Root not set, please type root path :" answer
        if [[ -d $answer ]]; then
            root_dir=$answer
        else
            echo -e "zmux: Error: Path not valid, Exiting.." >&2;
            exit 2;
        fi
    fi
    if [[ ! -f "${export_file}" ]]; then
        yaml_content="sessions:
  ${session_name}:
    root: ${root_dir}
    start_index: 1
    windows:"
    else
        yaml_content="  ${session_name}:
    root: ${root_dir}
    start_index: 1
    windows:"
    fi
    local windows=$(tmux list-windows -t $session_name -F '#I #W #{pane_current_path}')
    while IFS=' ' read -r index name path; do
        last_command=""
        yaml_content+="
      - name: $name
        command: \"$last_command\""
    done <<< "$windows"
    echo -e "${yaml_content}" >> $export_file;
    if [[ ! -f "${export_file}" ]]; then
        echo "Created config file for '${session_name}' on '${export_file}'"
    else
        echo "Appended config file for '${session_name}' on '${export_file}'"
    fi
}

# When using -h flag
help() {
        echo "Usage: zmux [session] or zmux [flag]";
        echo "You can use zmux with no arguments to list all active and pre configured sessions";
        echo "You can press Ctrl-t to toggle preview-window"
        echo "Flags:";
        echo "-h, --help         Print this help message";
        echo "-k, --kill         Kill Tmux server";
        echo "-e, --export       Export current session into a YAML file";
        echo "-c, --check        Check your configuration files with yamllint(required)";
        echo "-v, --version      Display version information and exit";
}

grep_config() {
    local session_name="$1"
    for yaml_file in "${CONFIG_DIR}"/*.yaml; do
        if (yq ".sessions.${session_name}" "${yaml_file}" | grep -v null &>/dev/null); then
            return 1
        fi
    done
    return 0
}

main() {
    if [[ $# -eq 0 ]]; then
        list_sessions;
        exit 0;
    elif [[ $1 == "--help" || $1 == "-h" ]]; then
        help;
    elif [[ $1 == "--version" || $1 == "-v" ]]; then
        echo "${VERSION}";
        exit 0
    elif [[ $1 == "--kill" || $1 == "-k" ]]; then
        tmux kill-server;
    elif [[ $1 == "--check" || $1 == "-c" ]]; then
        command -v yamllint >/dev/null 2>&1 || { echo "zmux: Error: yamllint is required but not installed." >&2; exit 1; }
        check_config
        yamllint --no-warnings "${CONFIG_DIR}"
    elif [[ $1 == "--export" || $1 == "-e" ]]; then
        if is_tmux_open; then
            echo "zmux: Error: Must be on Tmux" >&2; exit 3;
        fi;
        read -p "Want Export Current Session Configuration?[Y/n] " yn
        case $yn in
            [Yy]* ) export_config $@; exit 0;;
            [Nn]* ) exit ;;
            *) echo "zmux: Error: answer not valid. Exiting.." && exit;;
        esac;
    elif [[ $1 == "-"* ]]; then
        echo "zmux: Error: Name must not start with '-'" >&2
    else
        check_config
        if [[ $(echo "${configured}" | uniq -d) ]]; then
            dup=$(echo "${configured}" | uniq -d | tr '\n' ' ')
            echo -e "zmux: error: duplicate session(s) found '${dup}', exiting.." >&2;
            exit 2
        fi
        local session_name="$1"
        if [[ ! "$session_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "zmux: Error: Invalid session name '$session_name'. Use Alphanumeric, underscore or hyphen." >&2
            exit 1
        elif grep_config $@ && ! session_exists "${session_name}"; then
            echo "zmux: Error: Session '${session_name}' not found." >&2
            read -p "Want to create a new session named '${session_name}'?[Y/n] " answer
            case $answer in
                [Yy]* )
                    echo "Session will be created. Continuing.."
                    tmux new-session -d -s "$session_name"
                    ;;
                [Nn]* )
                    echo "Session will not be created. Exiting.."
                    exit
                    ;;
                *) echo "zmux: Error: answer not valid. Exiting.." && exit;;
            esac
        fi
        if ! tmux_running; then
            echo "No Tmux server found, starting default server"
            tmux new-session -d -s default
        fi
        if ! session_exists "$session_name"; then
            create_session "$session_name"
        fi
        if is_tmux_open; then
            tmux attach-session -t "$session_name":1
        else
            tmux switch-client -t "$session_name":1
        fi
    fi

}

main "$@"
